{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Celeritas","text":"<p>Welcome to the Celeritas Game Engine's documentation!</p>"},{"location":"#what-is-it","title":"What is it?","text":"<p>Celeritas is a small 3D game engine 'framework' written in plain ol' C and OCaml.</p> <p>The idea underlying celeritas is to have a small versatile \"core\" that can then be added to from other languages. This means you could add gameplay systems in OCaml but rely on the celeritas core layer to do all the heavy lifting  when it comes to computation or rendering. I will be providing ocaml bindings to the C API but implementing Lua bindings for example would be fairly trivial.</p> <p>Riot Games refers to this as engine-heavy vs. engine-light; we are strongly in the engine-light category.</p> <p>What does 'celeritas' mean?</p> <p>Celerity is an English word meaning \"alacrity\" \"swiftness\". Celeritas is the original Latin word for celerity that the English is derived from.</p>"},{"location":"#feature-set","title":"Feature Set","text":"<p>See here (README)</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Check these pages out</p> <ul> <li>Getting started</li> <li>Project layout</li> </ul>"},{"location":"getting-started/","title":"Getting up and running","text":"<p>The main build tool we use is xmake so installing that is the main prerequisite.</p> <p>Once that is installed you should be able to simply run <code>xmake build</code> in the top-level directory.</p>"},{"location":"project-layout/","title":"Project Structure","text":"<pre><code>assets/   - shaders and bundled assets for examples (must be licensed open)\nbindgen/  - bindings generation\ndeps/     - third-party dependencies\ndocs/     - these docs you're reading now that get built with mkdocs\nsrc/\n    core/     - core game engine facilities\n    logos/    -\n    maths/\n    platform/\n    ral/\n    render/\n    resources/\n    std/\n    systems/\n    ui/\n</code></pre>"},{"location":"project-layout/#core","title":"Core","text":"<p>Core holds specifically functionality vital to making games or 3D applications. Contrast this with <code>std</code> which contains code that could form the base layer of almost any software out there.</p>"},{"location":"project-layout/#std","title":"Std","text":"<p>Data structures, algorithms, memory management, etc - all code here forms a foundation for everything above it and can conceivably be reused in non-game applications.</p>"},{"location":"rendering/","title":"Rendering","text":"<p>Rendering is split into 3 'registers'.</p> <ol> <li>RAL (Render Abstraction Layer) - thin abstraction over graphics APIs</li> <li>Render - implements the default renderer and higher-level functions</li> <li>Immediate - immediate-mode drawing API for things like debug visualisation and UI</li> </ol>"},{"location":"rendering/#ral","title":"RAL","text":"<ul> <li>RAL doesn't know what 'meshes' are or 'materials', it purely deals with buffers, textures, pipelines, etc. Those concepts   are left to the <code>Render</code> module.</li> </ul>"},{"location":"rendering/#render","title":"Render","text":""},{"location":"rendering/#adding-shader-effects","title":"Adding shader effects","text":"<p>A few decisions have affected how shader data binding works in the RAL and if you're coming from purely OpenGL with floating uniforms like</p> <pre><code>uniform mat4 viewProjection;\n</code></pre> <p>it might feel a little complicated. However, this setup helps us abstract over different graphics API backends as well as be more performant in the general case with more data uploaded in one call. Because of the lack of generics in C, we adopt a <code>void*</code> data with a function pointer returning a \"layout\" for bindings that the backend can then interpret in order to know how to bind that specific data. This means you will need to do a little bit of work creating a function for each shader data binding. We'll look at an example:</p> <p>TODO: ShaderBinding / Layout example</p>"},{"location":"using-celeritas/","title":"Using Celeritas","text":"<p>TL;DR </p> <ul> <li>use the amalgamation header <code>celeritas.h</code> that exposes all public functions in a single header<ul> <li>you can recreate it with <code>scripts/amalgamation/gen_header.py</code></li> </ul> </li> <li>link the precompiled <code>core_static</code> or <code>core_shared</code> libraries</li> <li>or compile using <code>xmake build</code>, the binaries will be in <code>build/&lt;os&gt;/x64/core_static</code>, etc</li> </ul>"},{"location":"Contributing/c-coding-style/","title":"C Coding Style","text":"<p>A lot of these should be forced onto you by <code>clang-format</code> and <code>clang-tidy</code> but for posterity here are a few of the styles that we stick to.</p> <ul> <li>Pointer next to type - we use <code>type* variable</code> in function signatures and variable declarations e.g. <code>mat4* model</code></li> </ul>"},{"location":"Contributing/c-coding-style/#memory","title":"Memory","text":""},{"location":"Contributing/c-coding-style/#arena-allocation","title":"Arena allocation","text":""},{"location":"Contributing/naming/","title":"Naming Conventions","text":""},{"location":"Contributing/naming/#1-prefer-sov-function-names","title":"1. Prefer SOV function names","text":"<p>Prefer SOV Subject Object Verb naming for functions.</p> <p>This makes it very easy to find the functions you want with autocomplete and maintain a consistent naming convention throughout the codebase.</p> <p>e.g.</p> <ul> <li><code>renderer_frame_begin</code></li> <li><code>engine_tick_begin</code></li> <li><code>texture_data_load</code></li> </ul>"},{"location":"Contributing/naming/#2-long-running-systems","title":"2. Long-running systems","text":"<p>in celeritas a \"system\" is roughly something that runs every frame</p> <p>systems that run for the lifetime of the application or for a very long time should have:</p> <ul> <li><code>bool system_init(system_state* state)</code> a <code>init</code> function</li> <li><code>void system_shutdown(system_state* state)</code> and a <code>shutdown</code> function</li> </ul>"},{"location":"Contributing/naming/#3-todo","title":"3. TODO","text":""}]}